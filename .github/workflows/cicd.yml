name: Deploy Email Campaign with AgentCore
on:
  push:
    branches: [main]

env:
  EMAIL_BACKEND: ses
  SENDER_EMAIL: evshlom@gmail.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Upload customer data to S3
        run: aws s3 cp data/customers.json s3://aiawsattack-bucket/
      
      - name: Deploy Lambda for AgentCore
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Create Lambda execution role if needed
          aws iam create-role \
            --role-name email-agent-lambda-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "lambda.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }' || true
          
          aws iam attach-role-policy \
            --role-name email-agent-lambda-role \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true
          
          # Package and deploy Lambda
          cd src
          zip ../function.zip lambda_agent.py
          cd ..
          
          aws lambda create-function \
            --function-name email-agent \
            --runtime python3.11 \
            --role arn:aws:iam::$ACCOUNT_ID:role/email-agent-lambda-role \
            --handler lambda_agent.lambda_handler \
            --zip-file fileb://function.zip \
            --timeout 30 || \
          aws lambda update-function-code \
            --function-name email-agent \
            --zip-file fileb://function.zip
          
          echo "EMAIL_AGENT_ARN=arn:aws:lambda:us-east-1:$ACCOUNT_ID:function:email-agent" >> $GITHUB_ENV
      
      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push Docker image
        run: |
          # Create ECR repository if it doesn't exist
          aws ecr create-repository --repository-name restaurant-email-app || true
          
          # Get account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Build and push
          docker build -t restaurant-email-app .
          docker tag restaurant-email-app:latest $ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/restaurant-email-app:latest
          docker push $ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/restaurant-email-app:latest
      
      - name: Create/Update ECS resources
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Create cluster
          aws ecs create-cluster --cluster-name restaurant-emails || true
          
          # Create task execution role if needed
          aws iam create-role \
            --role-name ecsTaskExecutionRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }' || true
          
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy || true
          
          # Create task role with AgentCore permissions
          aws iam create-role \
            --role-name ecsTaskRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }' || true
          
          # Attach policies for S3, SES, and Bedrock
          aws iam attach-role-policy \
            --role-name ecsTaskRole \
            --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess || true
          
          aws iam attach-role-policy \
            --role-name ecsTaskRole \
            --policy-arn arn:aws:iam::aws:policy/AmazonSESFullAccess || true
          
          # Create inline policy for Bedrock AgentCore
          aws iam put-role-policy \
            --role-name ecsTaskRole \
            --policy-name BedrockAgentAccess \
            --policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "bedrock:InvokeModel",
                  "bedrock-agent-runtime:InvokeInlineAgent",
                  "lambda:InvokeFunction"
                ],
                "Resource": "*"
              }]
            }'
          
          # Create log group
          aws logs create-log-group --log-group-name /ecs/restaurant-email || true
          
          # Register task definition with email backend configuration
          aws ecs register-task-definition \
            --family restaurant-email \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "256" \
            --memory "512" \
            --execution-role-arn arn:aws:iam::$ACCOUNT_ID:role/ecsTaskExecutionRole \
            --task-role-arn arn:aws:iam::$ACCOUNT_ID:role/ecsTaskRole \
            --container-definitions '[{
              "name": "app",
              "image": "'$ACCOUNT_ID'.dkr.ecr.us-east-1.amazonaws.com/restaurant-email-app:latest",
              "essential": true,
              "environment": [
                {"name": "EMAIL_BACKEND", "value": "'$EMAIL_BACKEND'"},
                {"name": "SENDER_EMAIL", "value": "'$SENDER_EMAIL'"},
                {"name": "EMAIL_AGENT_ARN", "value": "'$EMAIL_AGENT_ARN'"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/restaurant-email",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }]'
          
          echo "Deployment complete!"
          echo "Email backend: $EMAIL_BACKEND"
          echo "AgentCore Lambda deployed: $EMAIL_AGENT_ARN"